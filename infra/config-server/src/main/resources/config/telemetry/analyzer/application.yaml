analyzer:
  kafka:
    bootstrap-servers: "localhost:9092"
    topic:
      hubs: telemetry.hubs.v1
      snapshots: telemetry.snapshots.v1
    consumer:
      snapshot-properties:
        bootstrap.servers: ${analyzer.kafka.bootstrap-servers}
        key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value.deserializer: ru.yandex.practicum.deserializer.SensorEventDeserializer
        group.id: analyzer-snapshot-group
      hub-properties:
        bootstrap.servers: ${analyzer.kafka.bootstrap-servers}
        key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value.deserializer: ru.yandex.practicum.deserializer.HubEventDeserializer
        group.id: analyzer-hub-group
spring:
  sql:
    init:
      mode: always
  datasource:
    driver-class-name: org.postgresql.Driver
    url: 'jdbc:postgresql://localhost:5432/analyzer'
    username: analyzer
    password: analyzer
logging:
  level:
    ru.yandex.practicum: TRACE
    org.apache.kafka: ERROR

grpc:
  client:
    hub-router:
      address: 'discovery:///hub-router'
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext